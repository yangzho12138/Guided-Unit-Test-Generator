package org.jsoup.mytests;
import edu.illinois.cs.test.generator.TestGenerator;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jsoup.nodes.*;
import org.jsoup.select.*;
import org.jsoup.examples.*;
import org.jsoup.parser.*;
import org.jsoup.helper.*;
import org.jsoup.internal.*;
import org.jsoup.safety.*;
import org.jsoup.*;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.regex.Pattern;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.*;
import org.jsoup.nodes.Document.OutputSettings;
import org.jsoup.nodes.Document.QuirksMode;
import org.jsoup.Connection.Method;
import org.jsoup.parser.helper.Validate;
import javax.net.ssl.SSLSocketFactory;

import java.net.Proxy;

public class AutomatedTest {
    @Test
    public void testAttributesget43669106() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("colgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget65528935() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget89472023() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get(":lt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget58505250() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get(":nth-child'");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesget47619651() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.get("deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase83434058() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":only-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase31662364() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("forl");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase48436913() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase59835351() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase(":nth-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesgetIgnoreCase45698769() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.getIgnoreCase("a");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd74875052() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("hiddem","iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd3862528() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("DOCTYPD","keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd74928203() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add("#roou","evem");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd3636300() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add(":gt)",":last-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesadd90101282() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.add(":emptx","base");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput83049895() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("theae","abs;");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput34168035() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("US-ASCIH","evem");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput19646176() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("hidden","typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput62503199() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":only-chilc","math");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput76241448() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("UTF,","li");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput80083009() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("#root",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput34853959() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("deflatf",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput16851080() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("template",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput1014362() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put("odc",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput35747352() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put(":contains)",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput35249261() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput77501921() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput35058703() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput87987531() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesput27016301() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Attributes result = attributes.put((Attribute) TestGenerator.getObjectFromPool("Attribute"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove35086820() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("action");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove37511067() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("span");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove21313433() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("dc");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove89035961() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove(":nth-last-of-type'");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremove12485128() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.remove("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase63734547() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("hr");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase77045629() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("theae");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase4495807() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("rubz");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase96527630() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("h3");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesremoveIgnoreCase92025959() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.removeIgnoreCase("te");
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey61387104() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("sarcasl");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey99704539() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":matchesOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey35641606() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey(":lt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey40913068() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("de");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKey4891641() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKey("href");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase51585582() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("col");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase66652639() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("actioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase4072496() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase53005008() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase("optiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshasKeyIgnoreCase48841047() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.hasKeyIgnoreCase(":all");
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize40324893() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize80907622() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize43502889() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize83234597() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributessize3892500() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.size();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty55797113() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty67523260() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty25597802() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty68245397() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesisEmpty52894234() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        boolean result = attributes.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll30428919() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll26134167() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll28494111() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll67769914() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesaddAll82380108() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.addAll((Attributes) TestGenerator.getObjectFromPool("Attributes"));
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList15476160() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList39400825() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList62809198() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList33901243() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesasList17382496() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        List<Attribute> result = attributes.asList();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset36355215() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset90151470() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset56581424() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset18479482() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdataset49991287() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        Map<String, String> result = attributes.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml52675063() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml48098484() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml49529402() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml13016151() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributeshtml78368236() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        String result = attributes.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize38764388() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize81985415() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize36934286() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize23393335() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesnormalize40119806() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        attributes.normalize();
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate39676330() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate35167686() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate6433368() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate85754664() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesdeduplicate91467493() {
        Attributes attributes = (Attributes) TestGenerator.getObjectFromPool("Attributes");
        if (attributes == null) {
            return;
        }
        int result = attributes.deduplicate((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(attributes.equals(attributes));
        try {
            attributes.equals(attributes);
        } catch (Exception e) {
            fail("attributes.equals(attributes) throws an exception");
        }
        try {
            attributes.hashCode();
        } catch (Exception e) {
            fail("attributes.hashCode() throws an exception");
        }
        try {
            attributes.toString();
        } catch (Exception e) {
            fail("attributes.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName34477551() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName31735346() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName73343367() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName19018340() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName11004962() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.tagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName49006738() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName83310295() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName80093163() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName49786466() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnormalName29382010() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName2426721() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("UTF-");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName30168971() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("buttoo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName48827071() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("isindew");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName89725478() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("*>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtagName54403811() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.tagName("text.");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag45370821() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag66609098() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag70767733() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag77103361() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtag12195231() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Tag result = element.tag();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock13283237() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock54809676() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock13552777() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock2529547() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementisBlock43653769() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid56086857() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid17493470() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid22924541() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid57256635() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementid71100037() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.id();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr77844721() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("basefont",":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr19291870() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("tfoou","iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr8179467() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("bgsound","~=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr67513212() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("http:0","tbodz");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr94032432() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("lh","xmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr93606184() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":matchTexu",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr5256479() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("hidden",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr81063842() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("checkbox",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr10387589() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr("xmp",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementattr2456993() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.attr(":containsData'",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset47271515() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset72242568() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset86407636() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset72926089() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataset75053266() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Map<String, String> result = element.dataset();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents12699796() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents96988343() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents18852164() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents39372201() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementparents46441031() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild3090971() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild82371868() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(240);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild69476923() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(400);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild38530528() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(57343);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchild37426391() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.child(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren83981562() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren91974911() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren15431231() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren23184788() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementchildren10056315() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.children();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes46980534() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes69003739() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes5204915() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes5161615() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtextNodes46298422() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<TextNode> result = element.textNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes94061891() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes95041184() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes67135979() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes98924481() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdataNodes13912658() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        List<DataNode> result = element.dataNodes();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect68514018() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect32924875() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("tfoos");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect93508166() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("xml");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect32494819() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("tbodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselect6154139() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.select("xmq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst78946186() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("colgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst2359199() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("tablf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst28359398() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst33421166() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementselectFirst99626984() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.selectFirst("DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis4611408() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis88306150() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("heae");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis66996335() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis90786781() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis68026508() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis86479336() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis98099560() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis17909664() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis94252606() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementis17413381() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.is((Evaluator) TestGenerator.getObjectFromPool("Evaluator"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild73195789() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild75847798() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild7030362() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild4860636() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendChild58169134() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo50796238() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo42130617() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo72953893() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo2035923() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendTo49892640() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendTo((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild5000402() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild53394516() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild26894241() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild48085755() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependChild76856084() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependChild((Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren39715622() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(224,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren21735706() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-99,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren86723032() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(4,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren1153694() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(1,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren15737828() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(55296,(Collection<? extends Node>) TestGenerator.getObjectFromPool("Collection<? extends Node>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren58974022() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren91012533() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren96717930() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(192,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren80992543() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(-100,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementinsertChildren66408260() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.insertChildren(57342,(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement56648861() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement40960958() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement(":nth-last-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement91964588() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement9294718() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendElement81053885() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendElement("basd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement19959360() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement1376419() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("htto");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement96031400() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement52487320() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement(":first-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependElement90761440() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependElement("de");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText26644046() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("*{");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText27602833() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("-,");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText45187177() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("|");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText2551617() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("optgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappendText28244843() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.appendText("|");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText55842135() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("captiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText29613655() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("sarcasm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText44479749() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText73128082() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("keygeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprependText7025546() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prependText("actiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend68678423() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append(":nth-last-child(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend79444962() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append(":matchesOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend9271465() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("noembee");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend78034738() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("tr");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementappend43140090() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.append("tfoot");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend74254388() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend20894989() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("html");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend52840986() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend69181557() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementprepend87710015() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.prepend(":nth-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty47167534() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty34108059() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty96690404() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty43119637() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementempty60964200() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector18304762() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector23735287() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector10235204() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector64523844() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementcssSelector57526029() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.cssSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements51395243() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements51612579() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements79729552() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements19081866() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementsiblingElements2234241() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.siblingElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling323947() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling60029052() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling60371226() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling17998565() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSibling10489167() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.nextElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings3475144() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings12115285() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings53696275() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings81082120() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementnextElementSiblings69485947() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.nextElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling562725() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling99530503() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling7985603() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling81481529() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSibling77413409() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.previousElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings57171299() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings85190370() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings6570635() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings93056457() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementpreviousElementSiblings60691760() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.previousElementSiblings();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling14345323() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling59944024() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling77152472() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling92693874() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementfirstElementSibling46421457() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.firstElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex47862501() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex13148693() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex66340889() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex20776550() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementelementSiblingIndex57381996() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        int result = element.elementSiblingIndex();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling70340305() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling8920873() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling71485125() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling47077654() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementlastElementSibling87489020() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.lastElementSibling();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag40346330() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":has'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag13553876() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag80380981() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":empty");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag1427184() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByTag1658095() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByTag(":not(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById331069() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("style");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById94311713() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("actiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById59137831() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(":matchTexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById15492188() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById(";");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementById18001481() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.getElementById("\"");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass61142765() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass12093889() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("dt");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass87718221() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("inpus");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass76398584() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByClass22086482() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByClass("rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute50901333() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute61985414() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute67832751() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("colgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute37478503() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("com");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttribute22248820() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttribute("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting49061391() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("US-ASCII");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting80995684() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting82269779() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting49763812() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("hidden");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeStarting24928610() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeStarting("xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue45330624() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue(":nth-of-type'","^>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue73895461() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("optgroup","linl");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue35728762() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("a","met`");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue54776070() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("tq",":lt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValue20400646() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValue("a","hreg");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot73028250() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("noframet","eveo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot17706184() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot(":has)","optioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot4271232() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("[","selecu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot34451102() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("a","stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueNot64685691() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueNot("basefont","$>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting63070542() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("<0","ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting18941680() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("p","tfoos");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting87447797() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("templatd",":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting43782033() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("bs",":not'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueStarting16267199() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueStarting("dt",":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding43756381() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("charset","sarcasm");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding67302980() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("body","htto");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding30235173() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("command",":only-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding74374054() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("checkbow","captiom");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueEnding10786115() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueEnding("optgroup","td");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining321936() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("UTF,",":alk");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining34998920() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("h3","deflatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining28561610() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("a","nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining79809395() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining("DOCTYPE","a");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueContaining7451091() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueContaining(":nth-of-type'",".");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching55393680() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("h1",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching7259960() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("type",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching37123854() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("boundarx",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching41803814() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("noembed",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching87654493() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching(":contains'",(Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching33973122() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("htto","tabld");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching91757620() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("Set-Cookie","scripu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching64927975() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("http","rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching86451581() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("~<","colgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByAttributeValueMatching2181232() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByAttributeValueMatching("?","lh");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan22730834() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(57343);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan92089435() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(55396);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan76002519() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan26592560() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexLessThan44068842() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexLessThan(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan63742501() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(0);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan3607715() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan96035110() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan25767185() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexGreaterThan46003445() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexGreaterThan(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals3986273() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals13087981() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(55296);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals52308196() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals48684237() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(0);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsByIndexEquals84656675() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsByIndexEquals(1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText85093450() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("span");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText18057852() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("Set-Cookie");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText88906618() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("tbodz");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText47181027() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingText14438809() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingText("namd");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText15906717() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("boundarx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText61950763() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("radip");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText3656747() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("DOCTYPF");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText45773659() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText("h2");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsContainingOwnText33806861() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsContainingOwnText(":nth-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText82322902() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText31264345() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText3377741() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText23305186() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText48520232() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText36755449() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText(":has)");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText23633141() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("inpuu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText58739130() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("\'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText92466102() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingText83950028() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingText("tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText55429582() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText90934899() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText2565563() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText20751213() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText60369838() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText((Pattern) TestGenerator.getObjectFromPool("Pattern"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText97826872() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("titld");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText93319809() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("h1");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText34014619() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("]]>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText94345928() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetElementsMatchingOwnText71704536() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getElementsMatchingOwnText("bs");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements59308934() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements71041737() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements18216777() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements82763762() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementgetAllElements60358379() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Elements result = element.getAllElements();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext19482670() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext80874999() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext80148633() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext66931343() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext30163803() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText57191926() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText16621955() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText18289875() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText72385896() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementwholeText17996308() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.wholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText37078182() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText60450312() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText10872550() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText52228225() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementownText9904663() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.ownText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext7153198() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext74153875() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext81294474() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext35504819() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text(":only-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtext20630055() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.text("*{");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText21940281() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText52827245() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText46965469() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText39688214() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasText90650851() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata53746306() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata17800001() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata92891333() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata68069196() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementdata27581109() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.data();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName67696125() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName13878775() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName82555762() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName55858741() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassName62476865() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.className();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames57496748() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames54061497() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames82882537() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames32946396() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames3194808() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Set<String> result = element.classNames();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames87963923() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) TestGenerator.getObjectFromPool("Set<String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames27789891() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) TestGenerator.getObjectFromPool("Set<String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames97067246() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) TestGenerator.getObjectFromPool("Set<String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames42227084() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) TestGenerator.getObjectFromPool("Set<String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementclassNames61191061() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.classNames((Set<String>) TestGenerator.getObjectFromPool("Set<String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass81307549() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("h5");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass13145219() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("image");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass58464715() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("name");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass21256638() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("~>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhasClass39629830() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        boolean result = element.hasClass("httpt");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass58304810() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass80054439() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass(":last-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass62518497() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass50098822() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass("h6");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementaddClass23443389() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.addClass(":matchesOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass127962() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("th");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass64242487() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("boundarx");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass45900205() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("action");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass36178497() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("even");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementremoveClass56433643() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.removeClass("DOCTYPF");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass23835987() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass81285686() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("spam");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass54867728() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass(":matches(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass91899453() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("templatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementtoggleClass39643389() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.toggleClass("]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval91139744() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval18143828() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval4645744() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval6873231() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval6082717() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval98341547() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val(":matches'");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval6630841() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("action");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval70149119() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("h3");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval21336567() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementval39176310() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.val("~>");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml23491202() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml93219504() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml81565454() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml47432258() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml41245470() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        String result = element.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml50699446() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml44418892() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html(":eq(");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml35443294() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("radio");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml22586364() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("du");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testElementhtml75397212() {
        Element element = (Element) TestGenerator.getObjectFromPool("Element");
        if (element == null) {
            return;
        }
        Element result = element.html("deflatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(element.equals(element));
        try {
            element.equals(element);
        } catch (Exception e) {
            fail("element.equals(element) throws an exception");
        }
        try {
            element.hashCode();
        } catch (Exception e) {
            fail("element.hashCode() throws an exception");
        }
        try {
            element.toString();
        } catch (Exception e) {
            fail("element.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell14947851() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("<.");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell76437688() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("styld");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell26438723() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("plaintexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell49290880() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("h1");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateShell49287458() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.createShell("noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation46148105() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation82849944() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation3683735() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation87617887() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentlocation36584763() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.location();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead16927659() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead17141428() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead31744485() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead67913296() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenthead46488168() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.head();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody47525726() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody47845714() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody93095950() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody36448062() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentbody81829169() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.body();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle18178119() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle20347737() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle24331792() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle50106670() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle64889687() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        String result = document.title();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle54051745() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title(":gt'");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle32245915() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title(":first-of-typf");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle9473563() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("*|");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle7279375() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("optiom");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumenttitle21063616() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.title("gziq");
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement12699299() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":containsData)");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement13298567() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement33934682() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":matchTexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement19151726() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement("optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcreateElement22304798() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Element result = document.createElement(":lt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise56039183() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise62226913() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise23203907() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise49981985() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentnormalise64545129() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.normalise();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset1269872() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset44214673() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset20399320() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset1806218() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset87102305() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.charset((Charset) TestGenerator.getObjectFromPool("Charset"));
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset19123723() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset1338554() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset42426833() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset91751428() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentcharset92733122() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Charset result = document.charset();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement68659959() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement42436056() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement37762579() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement62585123() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement15963697() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        document.updateMetaCharsetElement(true);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement29790409() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement9051298() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement24136581() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement87831814() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentupdateMetaCharsetElement53838090() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        boolean result = document.updateMetaCharsetElement();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings25478557() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings77452496() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings56746179() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings93626774() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings15780220() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        OutputSettings result = document.outputSettings();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings47891336() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings86452984() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings79688685() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings85746507() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentoutputSettings73210197() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.outputSettings((OutputSettings) TestGenerator.getObjectFromPool("OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode39594121() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode50762691() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode92433992() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode80421048() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode76118883() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        QuirksMode result = document.quirksMode();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode31570784() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode27852998() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode87867069() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode91237274() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentquirksMode58613444() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.quirksMode((QuirksMode) TestGenerator.getObjectFromPool("QuirksMode"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser60872098() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser58150562() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser18765834() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser63435041() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser72281782() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Parser result = document.parser();
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser63450824() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser62539604() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser21212979() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser98396420() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentparser24107928() {
        Document document = (Document) TestGenerator.getObjectFromPool("Document");
        if (document == null) {
            return;
        }
        Document result = document.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(document.equals(document));
        try {
            document.equals(document);
        } catch (Exception e) {
            fail("document.equals(document) throws an exception");
        }
        try {
            document.hashCode();
        } catch (Exception e) {
            fail("document.hashCode() throws an exception");
        }
        try {
            document.toString();
        } catch (Exception e) {
            fail("document.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity13970164() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity(":matchesOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity71421609() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("hs");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity44550910() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("!=");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity11916091() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("svh");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisNamedEntity53221876() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isNamedEntity("nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity22324044() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("captioo");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity22431044() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("commanc");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity94839705() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("Set-Cookif");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity21562686() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity(":nth-child'");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesisBaseNamedEntity24340148() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        boolean result = entities.isBaseNamedEntity("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName14238053() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("sarcasn");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName98143010() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName16561845() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("svh");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName82880544() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetCharacterByName44324278() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        Character result = entities.getCharacterByName("xml");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName61486293() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("titlf");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName66674468() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("*}");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName22629743() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("noscripu");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName25343333() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("basd");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesgetByName60699386() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.getByName("h1");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName95250812() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("<0",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100,100,55396,101,102,103,239,240,1114211,500,187});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName47979415() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("odd",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99,-100});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName95896026() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("styld",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401,57243,224,-99});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName57928584() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("checkee",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiescodepointsForName26911135() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        int result = entities.codepointsForName("#root",new int[]{0,-1,55296,192,1,55297,2,3,4,199,400,1114112,401});
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape55646830() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("nobr",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape62130317() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("=",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape64758203() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("text.",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape27033960() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("~<",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape97076109() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("$<",(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape32159058() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("--");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape35186861() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape13607206() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("http-equiv");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape67238469() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesescape73113726() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.escape("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape12395987() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("disablec");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape67440047() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape(":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape29320667() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("h5");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape35420861() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("head");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testEntitiesunescape58318778() {
        Entities entities = (Entities) TestGenerator.getObjectFromPool("Entities");
        if (entities == null) {
            return;
        }
        String result = entities.unescape("option");
        TestGenerator.putObjectToPool(result);
        assertTrue(entities.equals(entities));
        try {
            entities.equals(entities);
        } catch (Exception e) {
            fail("entities.equals(entities) throws an exception");
        }
        try {
            entities.hashCode();
        } catch (Exception e) {
            fail("entities.hashCode() throws an exception");
        }
        try {
            entities.toString();
        } catch (Exception e) {
            fail("entities.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName49129050() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName1912999() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName40679892() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName45480564() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodenodeName96200764() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData36322137() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData31910742() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData91770777() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData14009606() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodegetWholeData87993872() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        String result = datanode.getWholeData();
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData76290172() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData96519031() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("^<");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData79783184() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("bodz");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData6948018() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("boundarz");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodesetWholeData54528207() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.setWholeData("tr");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded88825641() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("*>","col");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded61598443() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded(":containsOwn(",":matchText");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded98914618() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded(":only-chilc","^=");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded30412329() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("theae",":not(");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testDataNodecreateFromEncoded19946778() {
        DataNode datanode = (DataNode) TestGenerator.getObjectFromPool("DataNode");
        if (datanode == null) {
            return;
        }
        DataNode result = datanode.createFromEncoded("checkbow","odd");
        TestGenerator.putObjectToPool(result);
        assertTrue(datanode.equals(datanode));
        try {
            datanode.equals(datanode);
        } catch (Exception e) {
            fail("datanode.equals(datanode) throws an exception");
        }
        try {
            datanode.hashCode();
        } catch (Exception e) {
            fail("datanode.hashCode() throws an exception");
        }
        try {
            datanode.toString();
        } catch (Exception e) {
            fail("datanode.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName27375121() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName19864655() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName37014211() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName43430696() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentnodeName30757180() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData13574563() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData93134461() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData29880839() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData20282858() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentgetData87103722() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        String result = comment.getData();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration36629643() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration196555() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration72632563() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration63522836() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentisXmlDeclaration98928745() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        boolean result = comment.isXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration31599569() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration64622238() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration13222684() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration54012577() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testCommentasXmlDeclaration78050184() {
        Comment comment = (Comment) TestGenerator.getObjectFromPool("Comment");
        if (comment == null) {
            return;
        }
        XmlDeclaration result = comment.asXmlDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(comment.equals(comment));
        try {
            comment.equals(comment);
        } catch (Exception e) {
            fail("comment.equals(comment) throws an exception");
        }
        try {
            comment.hashCode();
        } catch (Exception e) {
            fail("comment.hashCode() throws an exception");
        }
        try {
            comment.toString();
        } catch (Exception e) {
            fail("comment.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName8325379() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName38234133() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName56163302() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName59482702() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationnodeName29015384() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname12039505() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname38773714() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname885162() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname83467017() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationname2914079() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.name();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration31691595() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration52018004() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration19596960() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration28370034() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testXmlDeclarationgetWholeDeclaration69962763() {
        XmlDeclaration xmldeclaration = (XmlDeclaration) TestGenerator.getObjectFromPool("XmlDeclaration");
        if (xmldeclaration == null) {
            return;
        }
        String result = xmldeclaration.getWholeDeclaration();
        TestGenerator.putObjectToPool(result);
        assertTrue(xmldeclaration.equals(xmldeclaration));
        try {
            xmldeclaration.equals(xmldeclaration);
        } catch (Exception e) {
            fail("xmldeclaration.equals(xmldeclaration) throws an exception");
        }
        try {
            xmldeclaration.hashCode();
        } catch (Exception e) {
            fail("xmldeclaration.hashCode() throws an exception");
        }
        try {
            xmldeclaration.toString();
        } catch (Exception e) {
            fail("xmldeclaration.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements36149687() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements91480454() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements39064479() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements59485415() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementelements86781343() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Elements result = formelement.elements();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement87072054() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement1009754() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement57347351() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement20009653() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementaddElement52846501() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        FormElement result = formelement.addElement((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit89958802() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit84760909() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit7095288() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit26539707() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementsubmit53797225() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        Connection result = formelement.submit();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData46477240() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData75531557() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData6485301() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData25487058() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testFormElementformData71580130() {
        FormElement formelement = (FormElement) TestGenerator.getObjectFromPool("FormElement");
        if (formelement == null) {
            return;
        }
        List<Connection.KeyVal> result = formelement.formData();
        TestGenerator.putObjectToPool(result);
        assertTrue(formelement.equals(formelement));
        try {
            formelement.equals(formelement);
        } catch (Exception e) {
            fail("formelement.equals(formelement) throws an exception");
        }
        try {
            formelement.hashCode();
        } catch (Exception e) {
            fail("formelement.hashCode() throws an exception");
        }
        try {
            formelement.toString();
        } catch (Exception e) {
            fail("formelement.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey63243728() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("noframes");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey1701383() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("radin");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey99320369() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("rubx");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey10467757() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey(":alk");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testDocumentTypesetPubSysKey42670699() {
        DocumentType documenttype = (DocumentType) TestGenerator.getObjectFromPool("DocumentType");
        if (documenttype == null) {
            return;
        }
        documenttype.setPubSysKey("bs");
        assertTrue(documenttype.equals(documenttype));
        try {
            documenttype.equals(documenttype);
        } catch (Exception e) {
            fail("documenttype.equals(documenttype) throws an exception");
        }
        try {
            documenttype.hashCode();
        } catch (Exception e) {
            fail("documenttype.hashCode() throws an exception");
        }
        try {
            documenttype.toString();
        } catch (Exception e) {
            fail("documenttype.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey20329696() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey98480544() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey12600039() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey33935226() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetKey48346113() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey90879050() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("\"");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey96602542() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey(":empty");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey98586142() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey(":contains)");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey95157970() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("*");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetKey67832329() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        attribute.setKey("]]?");
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue75760376() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue3618389() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue20379081() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue13480750() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributegetValue30347651() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.getValue();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue2078316() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("typd");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue16348352() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue47820583() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue26491690() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributesetValue69650480() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.setValue("math");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml39427532() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml49356979() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml34486654() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml12468843() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributehtml67384203() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        String result = attribute.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded55231440() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("eveo","mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded16333575() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("noframet",":matchesOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded92775855() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("titld","*");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded36778303() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("h6","^");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testAttributecreateFromEncoded87454545() {
        Attribute attribute = (Attribute) TestGenerator.getObjectFromPool("Attribute");
        if (attribute == null) {
            return;
        }
        Attribute result = attribute.createFromEncoded("spam","basefont");
        TestGenerator.putObjectToPool(result);
        assertTrue(attribute.equals(attribute));
        try {
            attribute.equals(attribute);
        } catch (Exception e) {
            fail("attribute.equals(attribute) throws an exception");
        }
        try {
            attribute.hashCode();
        } catch (Exception e) {
            fail("attribute.hashCode() throws an exception");
        }
        try {
            attribute.toString();
        } catch (Exception e) {
            fail("attribute.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName13544750() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName62161989() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName83315240() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName20588204() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodenodeName40703705() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.nodeName();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext65292983() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext43671194() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext5836492() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext60067944() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext29758803() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext34166477() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("]]?");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext80369823() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("hidden");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext75478527() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("keygem");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext861372() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("image");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodetext42058435() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.text("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText9443414() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText41476141() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText45949271() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText63901467() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodegetWholeText16218498() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        String result = textnode.getWholeText();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank31480330() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank63528609() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank86706479() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank72807852() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodeisBlank9068176() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        boolean result = textnode.isBlank();
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText37116331() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(3);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText79759915() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText81880310() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText41580440() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodesplitText39223705() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.splitText(224);
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded32954480() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("gzip","Set-Cookie");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded48424303() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":first-child",":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded85279994() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("optioo","te");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded8281214() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("base","$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded50308283() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(".","DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded99822306() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("styld");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded90967179() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded1060680() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":emptz");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded24371266() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testTextNodecreateFromEncoded90906950() {
        TextNode textnode = (TextNode) TestGenerator.getObjectFromPool("TextNode");
        if (textnode == null) {
            return;
        }
        TextNode result = textnode.createFromEncoded("hq");
        TestGenerator.putObjectToPool(result);
        assertTrue(textnode.equals(textnode));
        try {
            textnode.equals(textnode);
        } catch (Exception e) {
            fail("textnode.equals(textnode) throws an exception");
        }
        try {
            textnode.hashCode();
        } catch (Exception e) {
            fail("textnode.hashCode() throws an exception");
        }
        try {
            textnode.toString();
        } catch (Exception e) {
            fail("textnode.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException87567152() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException72496123() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException882682() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException25793533() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testUncheckedIOExceptionioException76323500() {
        UncheckedIOException uncheckedioexception = (UncheckedIOException) TestGenerator.getObjectFromPool("UncheckedIOException");
        if (uncheckedioexception == null) {
            return;
        }
        IOException result = uncheckedioexception.ioException();
        TestGenerator.putObjectToPool(result);
        assertTrue(uncheckedioexception.equals(uncheckedioexception));
        try {
            uncheckedioexception.equals(uncheckedioexception);
        } catch (Exception e) {
            fail("uncheckedioexception.equals(uncheckedioexception) throws an exception");
        }
        try {
            uncheckedioexception.hashCode();
        } catch (Exception e) {
            fail("uncheckedioexception.hashCode() throws an exception");
        }
        try {
            uncheckedioexception.toString();
        } catch (Exception e) {
            fail("uncheckedioexception.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin16457693() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"h0");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin60035737() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),":last-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin50996395() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"gzip");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin40483138() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"plaintexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin34613893() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Collection) TestGenerator.getObjectFromPool("Collection"),"!=");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin88861690() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"charset");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin65087651() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"$<");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin5847564() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin20969084() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"DOCTYPF");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin25308065() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join((Iterator) TestGenerator.getObjectFromPool("Iterator"),"tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin13281332() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title"},":nth-last-of-type'");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin77202055() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf"},"deflatf");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin20773647() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled"},"#roou");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin31077091() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk"},"DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtiljoin96165615() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.join(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root"},"href");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding68728330() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(224);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding32068141() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(4);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding6878554() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding44037496() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilpadding16828439() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.padding(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank56655386() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank15051101() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank87123988() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank15783929() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("Set-Cookid");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisBlank4146237() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isBlank("colgrouq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric65873250() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("iframe");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric53332164() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("[");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric91132114() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("com");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric182599() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric("bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisNumeric72742594() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isNumeric(":matches(");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace49324760() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(55296);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace83903292() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace49975429() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace59699633() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(57343);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisWhitespace16251727() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isWhitespace(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace35171466() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(103);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace50002478() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace372502() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace36309199() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisActuallyWhitespace4866075() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isActuallyWhitespace(55296);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar87550863() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(0);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar64398675() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(3);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar57359039() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar86864635() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilisInvisibleChar60369690() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.isInvisibleChar(-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace80416842() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("tbodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace57456242() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("xmp");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace68722885() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("sarcasm");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace32720064() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("selecu");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilnormaliseWhitespace64977180() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.normaliseWhitespace("$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace37219775() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"),"ti",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace9767350() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"),"#roos",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace4175858() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"),":not'",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace24996636() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"),"abs9",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilappendNormalisedWhitespace51144386() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        stringutil.appendNormalisedWhitespace((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"),"scrips",true);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin36386422() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("basefont","=");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin65081568() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("tabld","stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin84363336() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in(":nth-of-type)","td");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin24489342() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in(":nth-last-child)","hiddeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilin52872708() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.in("h1","abs:");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted26045256() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted(":matchesOwn(",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link","linl","linj","basefont","basefonu","head","heae","nobs","nobr","nobq",":empty","commane",":emptx"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted3568658() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("typf",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted97010534() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("!>",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted48983281() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted(":last-of-type",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link","linl","linj","basefont","basefonu","head","heae","nobs","nobr","nobq",":empty","commane",":emptx","#texs","rubx","command","rubz","heac","commanc","ruby"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilinSorted92189761() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        boolean result = stringutil.inSorted("selecs",new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9"});
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve86779056() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),":nth-last-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve40567957() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"#texs");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve30683683() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),":not)");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve89918067() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"html");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve46084377() throws Exception {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        URL result = stringutil.resolve((URL) TestGenerator.getObjectFromPool("URL"),"thead");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve23996858() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("com","boundary");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve19104483() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("<0",":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve4833974() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve(":only-of-typd","bgsoune");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve59273552() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve(":only-of-type","nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilresolve10563543() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.resolve("basefont",":eq'");
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder39289989() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder846616() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder40993377() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder68335071() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilborrowBuilder13025293() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        StringBuilder result = stringutil.borrowBuilder();
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder94786572() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder76771676() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder66054737() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder34279892() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testStringUtilreleaseBuilder8694207() {
        StringUtil stringutil = (StringUtil) TestGenerator.getObjectFromPool("StringUtil");
        if (stringutil == null) {
            return;
        }
        String result = stringutil.releaseBuilder((StringBuilder) TestGenerator.getObjectFromPool("StringBuilder"));
        TestGenerator.putObjectToPool(result);
        assertTrue(stringutil.equals(stringutil));
        try {
            stringutil.equals(stringutil);
        } catch (Exception e) {
            fail("stringutil.equals(stringutil) throws an exception");
        }
        try {
            stringutil.hashCode();
        } catch (Exception e) {
            fail("stringutil.hashCode() throws an exception");
        }
        try {
            stringutil.toString();
        } catch (Exception e) {
            fail("stringutil.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase4636917() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("hree");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase41598356() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase(":eq'");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase99201448() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase34574877() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("#");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizerlowerCase40640639() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.lowerCase("de");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize97270532() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("disablec");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize89156429() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("noembec");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize63979490() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("xml");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize57737486() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize("boundarz");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testNormalizernormalize98288030() {
        Normalizer normalizer = (Normalizer) TestGenerator.getObjectFromPool("Normalizer");
        if (normalizer == null) {
            return;
        }
        String result = normalizer.normalize(":eq)");
        TestGenerator.putObjectToPool(result);
        assertTrue(normalizer.equals(normalizer));
        try {
            normalizer.equals(normalizer);
        } catch (Exception e) {
            fail("normalizer.equals(normalizer) throws an exception");
        }
        try {
            normalizer.hashCode();
        } catch (Exception e) {
            fail("normalizer.hashCode() throws an exception");
        }
        try {
            normalizer.toString();
        } catch (Exception e) {
            fail("normalizer.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap26816934() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),401,401);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap87983169() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),1114112,239);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap39587720() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),1114112,55396);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap49556352() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),57342,57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamwrap5748743() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.wrap((InputStream) TestGenerator.getObjectFromPool("InputStream"),100,55296);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer18613953() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(224);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer21090607() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer19947650() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer24999654() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(500);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamreadToByteBuffer64610704() throws Exception {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ByteBuffer result = constrainableinputstream.readToByteBuffer(240);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout92163622() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(-100,1);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout1054253() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(1,-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout56732242() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(100,-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout90696212() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(100,-1);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testConstrainableInputStreamtimeout79923123() {
        ConstrainableInputStream constrainableinputstream = (ConstrainableInputStream) TestGenerator.getObjectFromPool("ConstrainableInputStream");
        if (constrainableinputstream == null) {
            return;
        }
        ConstrainableInputStream result = constrainableinputstream.timeout(0,100);
        TestGenerator.putObjectToPool(result);
        assertTrue(constrainableinputstream.equals(constrainableinputstream));
        try {
            constrainableinputstream.equals(constrainableinputstream);
        } catch (Exception e) {
            fail("constrainableinputstream.equals(constrainableinputstream) throws an exception");
        }
        try {
            constrainableinputstream.hashCode();
        } catch (Exception e) {
            fail("constrainableinputstream.hashCode() throws an exception");
        }
        try {
            constrainableinputstream.toString();
        } catch (Exception e) {
            fail("constrainableinputstream.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse62692276() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("linj",":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse4304443() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("theae","heae");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse63307836() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("body",":nth-child(");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse40900699() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":nth-child'","template");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse83290878() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":lt)","DOCTYPD");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse7121814() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("template","eveo",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse90648744() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("textareb",":only-of-typf",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse33677019() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("ds","theae",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse53692741() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":containsOwn(","Set-Cookif",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse56877191() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("\'","iframe",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse80619276() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("button");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse38058707() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse8175563() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("US-ASCIH");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse21536550() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse("span");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse89746701() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse(":matchTexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect47075470() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("disabled");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect26927414() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("*|");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect29649408() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect73727672() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect("DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupconnect79861419() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Connection result = jsoup.connect(":has)");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse59084757() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"input","commane");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse50417418() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"typf","ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse84922109() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"hiddem","~<");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse36277641() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),":nth-last-child(","basefont");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse83555484() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"hs","odc");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse80780321() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse43039830() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"frameset");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse60550055() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),"form");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse48237965() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),":containsData)");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse54443352() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((File) TestGenerator.getObjectFromPool("File"),":nth-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse29335151() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"[a-zA-Z_:][-a-zA-Z0-9_:.]+","theae");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse17786610() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"de","href");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse32952886() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"mati","buttom");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse79377097() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),":first-chile","nobs");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse19838457() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"basefons","metb");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse4331193() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"?","noscrips",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse41664819() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"du","optiom",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse91404070() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"disablec","DOCTYPE",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse28649123() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"actioo","noframet",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse45658582() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((InputStream) TestGenerator.getObjectFromPool("InputStream"),"ts","link",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment99407241() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":nth-of-type'","ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment33569234() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("body","inpus");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment74702728() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment(":first-of-typf","rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment41178651() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("h6","~<");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment59375384() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("iframd",":nth-last-child'");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment96248432() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("radio");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment57926894() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment61243269() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("=");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment45110326() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparseBodyFragment17150990() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parseBodyFragment("heae");
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse26051141() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),191);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse47915342() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),187);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse62625280() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),57342);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse61449538() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupparse32076998() throws Exception {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        Document result = jsoup.parse((URL) TestGenerator.getObjectFromPool("URL"),187);
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean58803624() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("html","*=",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean72336940() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("tabld","style",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean58839029() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("!=","actiom",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean34198192() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("inpus","#root",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean53360558() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("http:.","hreg",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean38572482() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("sarcasl",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean8639416() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean(":alk",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean43215289() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("!>",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean87874631() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("plaintext",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean53014411() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("*>",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean94081500() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("isindew","#text",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean29862148() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("noframes","US-ASCIJ",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean25878833() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("tbodz","[CDATA[",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean66234041() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("colgrouo","https",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupclean88672495() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        String result = jsoup.clean("hs","selecu",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"),(Document.OutputSettings) TestGenerator.getObjectFromPool("Document.OutputSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid7666863() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("hr",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid11351201() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("iframd",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid39740027() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("http:/",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid87891127() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("namd",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testJsoupisValid39734574() {
        Jsoup jsoup = (Jsoup) TestGenerator.getObjectFromPool("Jsoup");
        if (jsoup == null) {
            return;
        }
        boolean result = jsoup.isValid("href",(Whitelist) TestGenerator.getObjectFromPool("Whitelist"));
        TestGenerator.putObjectToPool(result);
        assertTrue(jsoup.equals(jsoup));
        try {
            jsoup.equals(jsoup);
        } catch (Exception e) {
            fail("jsoup.equals(jsoup) throws an exception");
        }
        try {
            jsoup.hashCode();
        } catch (Exception e) {
            fail("jsoup.hashCode() throws an exception");
        }
        try {
            jsoup.toString();
        } catch (Exception e) {
            fail("jsoup.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput47635009() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("radip","titld");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput335438() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("$>","com");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput46386901() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("US-ASCIH","namd");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput81959002() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("imagf","typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput52013547() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput("~=","inpuu");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput28368925() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),":has(");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput5483072() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput81918847() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),":first-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput27844139() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"inpuu");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseInput39991975() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseInput((Reader) TestGenerator.getObjectFromPool("Reader"),"math");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput99395021() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(":matchesOwn(",(Element) TestGenerator.getObjectFromPool("Element"),"bs");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput21431773() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("#roos",(Element) TestGenerator.getObjectFromPool("Element"),"ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput14398749() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("https",(Element) TestGenerator.getObjectFromPool("Element"),"tbody");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput68051389() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput(";",(Element) TestGenerator.getObjectFromPool("Element"),":matchesOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragmentInput25777503() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragmentInput("de",(Element) TestGenerator.getObjectFromPool("Element"),".");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors1725852() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors87955159() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors71428177() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors63873842() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserisTrackErrors19382765() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        boolean result = parser.isTrackErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors60398883() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors38189744() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(55297);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors12300657() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(500);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors52351022() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(101);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersetTrackErrors52843402() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.setTrackErrors(55396);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors94863659() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors39114139() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors40449574() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors21756222() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsergetErrors45723118() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseErrorList result = parser.getErrors();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings76000413() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings72293535() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings24884511() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings5985962() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings70541165() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.settings((ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings23978590() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings6340834() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings62477704() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings36027399() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParsersettings89318029() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        ParseSettings result = parser.settings();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse74334062() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("svg","checkboy");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse33029939() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("http-equiw","titlf");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse81141432() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("hiddeo",":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse54717189() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse(":nth-last-of-type(","nobr");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparse42775294() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parse("isindey","-,");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment42526572() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("boundary",(Element) TestGenerator.getObjectFromPool("Element"),":last-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment14377656() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("https",(Element) TestGenerator.getObjectFromPool("Element"),":matchText");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment9080812() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("dd",(Element) TestGenerator.getObjectFromPool("Element"),"h4");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment42966333() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("plaintext",(Element) TestGenerator.getObjectFromPool("Element"),"com");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment4533299() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("nobq",(Element) TestGenerator.getObjectFromPool("Element"),"frameseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment58705209() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("ode",(Element) TestGenerator.getObjectFromPool("Element"),":matches'",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment5761068() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("*|",(Element) TestGenerator.getObjectFromPool("Element"),":last-chilc",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment18918096() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("tc",(Element) TestGenerator.getObjectFromPool("Element"),"met`",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment42624637() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("matg",(Element) TestGenerator.getObjectFromPool("Element"),"plaintexu",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseFragment35611496() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseFragment("hree",(Element) TestGenerator.getObjectFromPool("Element"),"*",(ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList"));
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment89177683() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("math","*");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment65662435() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("option","hidden");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment57093978() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("title","text.");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment22878505() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment(":only-of-type",":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseXmlFragment91479583() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        List<Node> result = parser.parseXmlFragment("h2","!<");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment91640375() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("*|",":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment57597849() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("checkee","h5");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment75970078() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("input","span");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment4563218() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("titld","charset");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragment44739361() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragment("odc","ds");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities26366518() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("typf",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities13130828() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("bodx",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities96051570() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("]]>",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities9643381() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("h2",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserunescapeEntities41600() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        String result = parser.unescapeEntities("http",true);
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed51847171() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("basefont","cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed3478200() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("templatf","httpt");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed74117763() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("keygeo",":lt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed55056889() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed(":lt(","commanc");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserparseBodyFragmentRelaxed71984183() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Document result = parser.parseBodyFragmentRelaxed("httq","imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser80960305() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser79948155() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser48079065() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser94899122() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserhtmlParser13512585() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.htmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser76539575() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser85100551() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser44348791() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser95647158() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testParserxmlParser17708835() {
        Parser parser = (Parser) TestGenerator.getObjectFromPool("Parser");
        if (parser == null) {
            return;
        }
        Parser result = parser.xmlParser();
        TestGenerator.putObjectToPool(result);
        assertTrue(parser.equals(parser));
        try {
            parser.equals(parser);
        } catch (Exception e) {
            fail("parser.equals(parser) throws an exception");
        }
        try {
            parser.hashCode();
        } catch (Exception e) {
            fail("parser.hashCode() throws an exception");
        }
        try {
            parser.toString();
        } catch (Exception e) {
            fail("parser.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName7219260() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName33449069() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName28421581() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName93574595() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTaggetName7680776() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.getName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName16703118() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName88417560() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName2304382() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName93923151() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagnormalName83462863() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        String result = tag.normalName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf85205983() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("ruby",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf11238633() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("isindey",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf6713258() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("htmk",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf21793550() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("http:0",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf69000210() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("tbody",(ParseSettings) TestGenerator.getObjectFromPool("ParseSettings"));
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf33994936() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf75613718() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":lt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf36042707() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("svf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf39126638() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf(":nth-child'");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagvalueOf88427171() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        Tag result = tag.valueOf("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock73700726() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock76313385() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock12491677() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock96249805() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisBlock86882336() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock76488873() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock87390755() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock10135778() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock31988898() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagformatAsBlock86768486() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.formatAsBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock84312093() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock12958039() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock62432753() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock85270657() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagcanContainBlock558938() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.canContainBlock();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline61499303() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline67646842() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline4593800() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline5251567() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisInline78951939() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isInline();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData99537865() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData68535921() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData63972984() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData74309883() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisData10636852() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isData();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty98524028() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty66109808() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty79368245() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty29151349() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisEmpty18603879() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing43606475() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing66263454() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing96990004() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing60974754() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisSelfClosing42927522() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isSelfClosing();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag39729797() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag61164088() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag32793876() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag33466085() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag24190554() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag34701069() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("form");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag45781167() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag34435654() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag60137275() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("image");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisKnownTag70782812() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isKnownTag("$>");
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace57035552() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace90486284() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace78060995() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace9366375() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagpreserveWhitespace302560() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.preserveWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed40271653() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed74997109() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed7280668() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed61710359() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormListed42378547() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormListed();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable29153653() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable86680534() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable93635120() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable51470225() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testTagisFormSubmittable28867399() {
        Tag tag = (Tag) TestGenerator.getObjectFromPool("Tag");
        if (tag == null) {
            return;
        }
        boolean result = tag.isFormSubmittable();
        TestGenerator.putObjectToPool(result);
        assertTrue(tag.equals(tag));
        try {
            tag.equals(tag);
        } catch (Exception e) {
            fail("tag.equals(tag) throws an exception");
        }
        try {
            tag.hashCode();
        } catch (Exception e) {
            fail("tag.hashCode() throws an exception");
        }
        try {
            tag.toString();
        } catch (Exception e) {
            fail("tag.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage42156640() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage52808252() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage48849406() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage51339907() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetErrorMessage79739115() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        String result = parseerror.getErrorMessage();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition71884665() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition43732528() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition97716317() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition16732875() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorgetPosition74850996() {
        ParseError parseerror = (ParseError) TestGenerator.getObjectFromPool("ParseError");
        if (parseerror == null) {
            return;
        }
        int result = parseerror.getPosition();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerror.equals(parseerror));
        try {
            parseerror.equals(parseerror);
        } catch (Exception e) {
            fail("parseerror.equals(parseerror) throws an exception");
        }
        try {
            parseerror.hashCode();
        } catch (Exception e) {
            fail("parseerror.hashCode() throws an exception");
        }
        try {
            parseerror.toString();
        } catch (Exception e) {
            fail("parseerror.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking88253622() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking96278867() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking21737821() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking58824257() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListnoTracking93235738() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.noTracking();
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking46463485() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking37858520() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking61463630() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking56409277() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(55297);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testParseErrorListtracking16775160() {
        ParseErrorList parseerrorlist = (ParseErrorList) TestGenerator.getObjectFromPool("ParseErrorList");
        if (parseerrorlist == null) {
            return;
        }
        ParseErrorList result = parseerrorlist.tracking(191);
        TestGenerator.putObjectToPool(result);
        assertTrue(parseerrorlist.equals(parseerrorlist));
        try {
            parseerrorlist.equals(parseerrorlist);
        } catch (Exception e) {
            fail("parseerrorlist.equals(parseerrorlist) throws an exception");
        }
        try {
            parseerrorlist.hashCode();
        } catch (Exception e) {
            fail("parseerrorlist.hashCode() throws an exception");
        }
        try {
            parseerrorlist.toString();
        } catch (Exception e) {
            fail("parseerrorlist.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos52786117() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos36113100() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos91461840() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos6956030() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderpos46250026() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        int result = characterreader.pos();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty51167896() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty21923585() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty54155557() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty5892241() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderisEmpty94565958() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        boolean result = characterreader.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent50195573() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent60459078() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent3625063() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent94920419() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReadercurrent23508864() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        char result = characterreader.current();
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance44232986() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance26946880() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance93113228() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance23351451() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderadvance22008376() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        characterreader.advance();
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo75420817() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('<');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo50963093() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('A');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo81383065() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('b');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo53253481() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('a');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeTo33969512() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeTo('@');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny28746937() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('A');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny26077929() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('o');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny39445132() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('A');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny82230122() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('<');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testCharacterReaderconsumeToAny65130850() {
        CharacterReader characterreader = (CharacterReader) TestGenerator.getObjectFromPool("CharacterReader");
        if (characterreader == null) {
            return;
        }
        String result = characterreader.consumeToAny('a');
        TestGenerator.putObjectToPool(result);
        assertTrue(characterreader.equals(characterreader));
        try {
            characterreader.equals(characterreader);
        } catch (Exception e) {
            fail("characterreader.equals(characterreader) throws an exception");
        }
        try {
            characterreader.hashCode();
        } catch (Exception e) {
            fail("characterreader.hashCode() throws an exception");
        }
        try {
            characterreader.toString();
        } catch (Exception e) {
            fail("characterreader.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload99700886() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"charses",":lt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload89820232() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),":only-chile","form");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload60920830() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"meta","radin");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload8352762() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"httq","xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload4767414() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((File) TestGenerator.getObjectFromPool("File"),"boundarx","metb");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload11272275() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"linl","frameset");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload24532922() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),":containsOwn)","iframd");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload60936382() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"noframer","noscripu");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload99122950() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"spao","^>");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload18943393() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"*",":last-child");
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload31114053() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"deflatd","ti",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload40336448() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"xmm","inpuu",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload46115025() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"rubx","^",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload75445653() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),"colgrouo","checkbow",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilload37524414() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        Document result = datautil.load((InputStream) TestGenerator.getObjectFromPool("InputStream"),":containsData(","httpr",(Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer99094121() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),2);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer68891801() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer14774657() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),57243);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer65048938() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),1114211);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testDataUtilreadToByteBuffer13871183() throws Exception {
        DataUtil datautil = (DataUtil) TestGenerator.getObjectFromPool("DataUtil");
        if (datautil == null) {
            return;
        }
        ByteBuffer result = datautil.readToByteBuffer((InputStream) TestGenerator.getObjectFromPool("InputStream"),-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(datautil.equals(datautil));
        try {
            datautil.equals(datautil);
        } catch (Exception e) {
            fail("datautil.equals(datautil) throws an exception");
        }
        try {
            datautil.hashCode();
        } catch (Exception e) {
            fail("datautil.hashCode() throws an exception");
        }
        try {
            datautil.toString();
        } catch (Exception e) {
            fail("datautil.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull51996463() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull71611809() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull24026617() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull14930721() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull94459378() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull10400024() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"noframes");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull20987722() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"^>");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull92216616() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"spao");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull5934354() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),":has'");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotNull53790026() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notNull((Object) TestGenerator.getObjectFromPool("Object"),"#");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue76643489() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue87564073() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue338809() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue49219423() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue15423148() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue14131879() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"DOCTYPE");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue54774410() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"evem");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue7050359() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"*");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue90862385() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,"keygen");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisTrue95102937() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isTrue(true,":last-chile");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse55156358() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse47113704() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse41586033() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse31536545() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse67753777() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true);
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse73405641() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,":only-child");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse6399894() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,":matchTexs");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse32444361() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"bgsounc");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse2947105() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,"sarcasl");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidateisFalse88586043() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.isFalse(true,":only-child");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements50913363() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements57997498() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements98887820() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements16697743() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements62560595() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"));
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements13726074() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"h0");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements99996303() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"typd");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements21546861() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),":gt)");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements66215468() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),":first-chilc");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenoNullElements47986328() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.noNullElements((Object[]) TestGenerator.getObjectFromPool("Object[]"),"(");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty87716498() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("br");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty5536391() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("head");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty43682891() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("--");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty71321906() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("basefons");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty26379453() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("base");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty15950656() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("checked","Set-Cookif");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty78785440() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty(":matchTexs","actioo");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty52928603() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("hreg","[a-zA-Z_:][-a-zA-Z0-9_:.])");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty91563432() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("radio","http-equiu");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatenotEmpty23610352() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.notEmpty("col","*>");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail23356380() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("hidden");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail73249027() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("td");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail35956300() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("UTF.");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail67542376() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("ts");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testValidatefail21653234() {
        Validate validate = (Validate) TestGenerator.getObjectFromPool("Validate");
        if (validate == null) {
            return;
        }
        validate.fail("noframer");
        assertTrue(validate.equals(validate));
        try {
            validate.equals(validate);
        } catch (Exception e) {
            fail("validate.equals(validate) throws an exception");
        }
        try {
            validate.hashCode();
        } catch (Exception e) {
            fail("validate.hashCode() throws an exception");
        }
        try {
            validate.toString();
        } catch (Exception e) {
            fail("validate.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect91533036() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("!>");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect84491028() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect67260348() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect(":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect34394848() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("inpuu");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect65971782() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect("htmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect17109204() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect58923178() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect6636095() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect20754225() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionconnect973517() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.connect((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl25011904() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl11859140() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl8955362() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl40113835() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl4367344() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url((URL) TestGenerator.getObjectFromPool("URL"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl13689961() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl50286648() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":first-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl43852382() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl48866190() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("noscripu");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionurl98080206() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.url("noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy79885993() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy42267689() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy52883820() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy29401565() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy81715702() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy((Proxy) TestGenerator.getObjectFromPool("Proxy"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy37341657() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("xmp",224);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy21180884() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("*{",2);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy4113821() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("</",239);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy30557730() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("radio",-100);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionproxy99472535() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.proxy("span",401);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent36729426() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("rubz");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent30713134() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("ts");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent35045644() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("noframer");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent38307812() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("name");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionuserAgent28591616() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.userAgent("text/");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout64779264() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout84036040() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(55396);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout50351657() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout66289811() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(55296);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiontimeout41279230() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.timeout(1);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize47188298() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(-99);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize56286173() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(1114112);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize14223989() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize45221103() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(401);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmaxBodySize10178295() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.maxBodySize(199);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects69375939() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects741170() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects44360934() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects2417576() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionfollowRedirects58034865() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.followRedirects(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer7424886() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("noscript");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer30767847() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("US-ASCIH");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer77273052() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("inpus");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer38000431() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionreferrer47073520() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.referrer("bgsounc");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod38865244() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod54647519() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod737310() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod8302616() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionmethod29927176() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.method((Method) TestGenerator.getObjectFromPool("Method"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors79921989() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors66298274() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors9645115() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors63789634() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreHttpErrors94704333() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreHttpErrors(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType19506211() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType40296657() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType74007478() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType79739885() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionignoreContentType8817382() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.ignoreContentType(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata42062201() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("^<","bgsoune");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata13901685() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("keygen","gzio");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata50042935() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("frameseu",":matchTexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata32781473() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("checkboy","titld");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata35824285() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("checkbox","text/");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory49538397() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory71061592() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory35829233() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory21521461() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionsslSocketFactory24030487() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.sslSocketFactory((SSLSocketFactory) TestGenerator.getObjectFromPool("SSLSocketFactory"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata64893490() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("svh",":matches)",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata5011954() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("*<",":only-chile",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata72015429() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":not(","disablec",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata24708674() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("radip","optgroup",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata54650671() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("html",":roos",(InputStream) TestGenerator.getObjectFromPool("InputStream"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata52250375() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata86909642() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1142626() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata19875728() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata38942640() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata56050692() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":only-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata35372801() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata57527977() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data(":gt(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata8268576() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("p");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata47781665() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data("isindey");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata38791731() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata8056716() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata1331626() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata39230129() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata48452340() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.data((Collection<Connection.KeyVal>) TestGenerator.getObjectFromPool("Collection<Connection.KeyVal>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata33132919() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("xmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata84184708() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data(":only-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata33021220() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("titld");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata4606690() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("*");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectiondata50313058() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.KeyVal result = httpconnection.data("httpr");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody40401224() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("name");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody44468073() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("script");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody22074585() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody("xmq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody14750432() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":gt)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequestBody93196400() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.requestBody(":nth-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader24934052() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("actiom","hiddeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader36158683() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("name","charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader47455778() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header(":not'","th");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader73217887() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header("typd","~=");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheader89291919() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.header(":not'","httpt");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders4265558() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders75321040() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders51243668() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders66090266() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionheaders80183734() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.headers((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie89108181() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":nth-child'","buttoo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie29638502() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("*>",":containsOwn(");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie28157899() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie("scrips","#text");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie24299385() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":alk","svg");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookie16855823() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookie(":first-of-type","basf");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies95741054() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies55497489() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies81456878() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies8844827() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectioncookies15016849() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.cookies((Map<String, String>) TestGenerator.getObjectFromPool("Map<String, String>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser84714364() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser48620752() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser14789734() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser59415125() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionparser90732600() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.parser((Parser) TestGenerator.getObjectFromPool("Parser"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget93173340() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget60301063() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget84317276() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget50664132() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionget89133217() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.get();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost70399445() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost14489899() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost3126533() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost28757131() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpost98694600() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Document result = httpconnection.post();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute9741796() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute16417100() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute89349616() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute55506176() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionexecute20545470() throws Exception {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.execute();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest67165376() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest38684842() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest91266270() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest74131815() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest33585327() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Request result = httpconnection.request();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest16850309() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest88536708() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest9550078() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest97688481() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionrequest26979977() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.request((Connection.Request) TestGenerator.getObjectFromPool("Connection.Request"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse16521494() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse62804324() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse94275155() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse49967661() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse14920398() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection.Response result = httpconnection.response();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse85471051() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse6012768() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse25797013() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse5669549() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionresponse77269449() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.response((Connection.Response) TestGenerator.getObjectFromPool("Connection.Response"));
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset12430562() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset(":empty");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset16254336() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("hiddeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset76083221() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset10867962() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("nobq");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testHttpConnectionpostDataCharset88883307() {
        HttpConnection httpconnection = (HttpConnection) TestGenerator.getObjectFromPool("HttpConnection");
        if (httpconnection == null) {
            return;
        }
        Connection result = httpconnection.postDataCharset("hs");
        TestGenerator.putObjectToPool(result);
        assertTrue(httpconnection.equals(httpconnection));
        try {
            httpconnection.equals(httpconnection);
        } catch (Exception e) {
            fail("httpconnection.equals(httpconnection) throws an exception");
        }
        try {
            httpconnection.hashCode();
        } catch (Exception e) {
            fail("httpconnection.hashCode() throws an exception");
        }
        try {
            httpconnection.toString();
        } catch (Exception e) {
            fail("httpconnection.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup12505887() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup76324523() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup58291322() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup92179061() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomfromJsoup22834111() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        Document result = w3cdom.fromJsoup((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert52524107() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert3119944() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert61301367() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert90387495() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomconvert98631881() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        w3cdom.convert((org.jsoup.nodes.Document) TestGenerator.getObjectFromPool("org.jsoup.nodes.Document"),(Document) TestGenerator.getObjectFromPool("Document"));
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString31338084() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString59102159() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString69222341() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString57541894() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testW3CDomasString8873058() {
        W3CDom w3cdom = (W3CDom) TestGenerator.getObjectFromPool("W3CDom");
        if (w3cdom == null) {
            return;
        }
        String result = w3cdom.asString((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(w3cdom.equals(w3cdom));
        try {
            w3cdom.equals(w3cdom);
        } catch (Exception e) {
            fail("w3cdom.equals(w3cdom) throws an exception");
        }
        try {
            w3cdom.hashCode();
        } catch (Exception e) {
            fail("w3cdom.hashCode() throws an exception");
        }
        try {
            w3cdom.toString();
        } catch (Exception e) {
            fail("w3cdom.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty93605408() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty98814119() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty46646369() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty37212003() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueisEmpty24362721() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.isEmpty();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek75081616() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek80817164() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek47377358() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek25721487() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuepeek68399835() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.peek();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst96650367() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('Z');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst40573039() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('G');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst37987762() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('+');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst57417640() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('F');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst30808097() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst('{');
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst66304892() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("iframd");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst60939278() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst(".");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst76361770() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("dt");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst71173679() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("spam");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueaddFirst2770295() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.addFirst("hq");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches61717579() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches68424116() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("radio");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches45483404() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("?");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches38042734() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches(":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematches5823253() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matches("Set-Cookif");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS98462628() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("!=");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS93489696() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("href");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS50314189() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS(":containsOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS96794232() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS("svh");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesCS44163433() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesCS(":roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny52144993() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("?");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny63327972() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("svh");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny90854483() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("^");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny551375() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("(");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny98185221() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny("button");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny71997805() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny(',');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny75683464() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('/');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny6130178() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('f');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny75485724() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('"');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesAny3182714() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesAny('\'');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag36391370() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag1313213() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag89397777() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag83867098() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesStartTag25928953() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesStartTag();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp91314885() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("tc");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp52484704() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("noframet");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp56527036() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp12393829() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchChomp90696103() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchChomp("xmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace99081849() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace26933491() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace53212888() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace97586823() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWhitespace40188642() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord55603470() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord98446188() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord4177197() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord94064738() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuematchesWord80475034() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.matchesWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance10015415() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance93439023() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance83382157() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance11697333() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueadvance82925416() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.advance();
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume62225735() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume84579022() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume27427805() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume23820710() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume89270658() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        char result = tokenqueue.consume();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume64575412() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("eveo");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume6933971() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume(":containsData'");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume15721879() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("theac");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume39350074() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("tr");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsume72103300() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        tokenqueue.consume("caption");
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo78219818() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("[a-zA-Z_:][-a-zA-Z0-9_:.]+");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo55979479() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("hr");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo36706397() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("bgsounc");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo78256615() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("de");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTo20921132() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTo("svf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase61014696() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("h5");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase39965927() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":last-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase71968550() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("optgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase50781227() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase("select");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToIgnoreCase11576259() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToIgnoreCase(":has(");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny81402316() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("scripu");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny66179077() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("meta");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny6807193() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("odc");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny39381254() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("de");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeToAny59579774() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeToAny("dt");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo88988524() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("[CDATA[");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo12792916() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("script");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo36590110() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("$=");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo8671132() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo(":nth-last-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompTo4658114() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompTo("gzip");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase75526322() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase(":only-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase97093673() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase(":roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase38134694() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase(":nth-last-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase77335866() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompToIgnoreCase44437088() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompToIgnoreCase("disablec");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced17430336() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('+','a');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced88624535() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('<','@');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced65284145() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('`','&');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced83078683() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('@','"');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueuechompBalanced96184765() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.chompBalanced('_','"');
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape41601754() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("linj");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape64575665() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":last-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape77397274() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape87027070() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape(":emptx");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueunescape70178315() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.unescape("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace22923045() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace82947159() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace79312396() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace38118759() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWhitespace11618165() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        boolean result = tokenqueue.consumeWhitespace();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord67963576() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord33064325() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord84581992() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord83996613() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeWord13433692() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeWord();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName74026884() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName86356301() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName44295197() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName80390938() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeTagName45061149() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeTagName();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector95221200() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector38310843() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector6781889() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector25761058() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeElementSelector21398734() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeElementSelector();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier7808510() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier67979592() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier8933723() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier58584565() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeCssIdentifier98542307() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeCssIdentifier();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey16935386() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey18113653() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey43476450() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey20593941() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueconsumeAttributeKey46720279() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.consumeAttributeKey();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder44766615() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder6142321() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder38684039() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder48375848() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testTokenQueueremainder31418286() {
        TokenQueue tokenqueue = (TokenQueue) TestGenerator.getObjectFromPool("TokenQueue");
        if (tokenqueue == null) {
            return;
        }
        String result = tokenqueue.remainder();
        TestGenerator.putObjectToPool(result);
        assertTrue(tokenqueue.equals(tokenqueue));
        try {
            tokenqueue.equals(tokenqueue);
        } catch (Exception e) {
            fail("tokenqueue.equals(tokenqueue) throws an exception");
        }
        try {
            tokenqueue.hashCode();
        } catch (Exception e) {
            fail("tokenqueue.hashCode() throws an exception");
        }
        try {
            tokenqueue.toString();
        } catch (Exception e) {
            fail("tokenqueue.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase31133100() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase33440742() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase27757831() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase64430536() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveTagCase80224741() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveTagCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase62069112() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase82543458() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase65348595() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase24901473() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingspreserveAttributeCase39116123() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        boolean result = parsesettings.preserveAttributeCase();
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag90074302() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("htto");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag98328510() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag(":containsOwn)");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag90218384() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("iframf");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag85269075() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("checkee");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeTag51274587() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeTag("deflate");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute57083783() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("[");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute6257618() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("evem");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute6183102() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("tabld");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute20740526() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("\'");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testParseSettingsnormalizeAttribute71814529() {
        ParseSettings parsesettings = (ParseSettings) TestGenerator.getObjectFromPool("ParseSettings");
        if (parsesettings == null) {
            return;
        }
        String result = parsesettings.normalizeAttribute("h4");
        TestGenerator.putObjectToPool(result);
        assertTrue(parsesettings.equals(parsesettings));
        try {
            parsesettings.equals(parsesettings);
        } catch (Exception e) {
            fail("parsesettings.equals(parsesettings) throws an exception");
        }
        try {
            parsesettings.hashCode();
        } catch (Exception e) {
            fail("parsesettings.hashCode() throws an exception");
        }
        try {
            parsesettings.toString();
        } catch (Exception e) {
            fail("parsesettings.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean98338160() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean56608853() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean79802803() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean49689447() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerclean51215201() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        Document result = cleaner.clean((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid23002451() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid46098021() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid21119716() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid62954695() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValid78475536() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValid((Document) TestGenerator.getObjectFromPool("Document"));
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml12444500() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml83933340() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("abs9");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml45589335() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("namf");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml78329158() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("input");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testCleanerisValidBodyHtml58622605() {
        Cleaner cleaner = (Cleaner) TestGenerator.getObjectFromPool("Cleaner");
        if (cleaner == null) {
            return;
        }
        boolean result = cleaner.isValidBodyHtml("linl");
        TestGenerator.putObjectToPool(result);
        assertTrue(cleaner.equals(cleaner));
        try {
            cleaner.equals(cleaner);
        } catch (Exception e) {
            fail("cleaner.equals(cleaner) throws an exception");
        }
        try {
            cleaner.hashCode();
        } catch (Exception e) {
            fail("cleaner.hashCode() throws an exception");
        }
        try {
            cleaner.toString();
        } catch (Exception e) {
            fail("cleaner.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone64302878() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone31154320() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone95692650() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone41039030() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistnone57887295() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.none();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText85515705() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText60057766() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText45343472() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText73896993() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistsimpleText87653541() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.simpleText();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic16464738() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic51278159() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic8912001() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic32403610() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasic18022924() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basic();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages48623984() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages7100760() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages21680904() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages77194484() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistbasicWithImages54973365() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.basicWithImages();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed59883422() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed50324243() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed6061542() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed850163() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistrelaxed87398178() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.relaxed();
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags35026186() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("mati");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags68508279() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("US-ASCIJ");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags33354766() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("template");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags25014185() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("htmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddTags31739156() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addTags("select");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags37817680() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("inpus");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags14305738() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags43258434() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("</");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags18178823() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("]]?");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveTags84280455() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeTags("plaintexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes92445482() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes(":has(","cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes8403794() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("tbodx","httpr");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes41720110() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("=","]]=");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes65645040() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes("dt","UTF-");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddAttributes27841231() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addAttributes(":eq)",":first-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes89784349() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":matches(",":emptz");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes26076305() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("titlf",";");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes89554944() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("frameses",":first-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes32220004() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes(":nth-last-of-type)",":containsData)");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveAttributes93015573() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeAttributes("checkec","stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute12655849() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("<0","theae","hq");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute43662378() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("titlf","optiom",":matches(");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute88734040() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("met`","iframe","buttom");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute1095533() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("\"\"",":nth-child(","basd");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddEnforcedAttribute45737208() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addEnforcedAttribute("xml","met`","keygen");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute23459711() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("UTF-","basefonu");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute90039612() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute(":nth-child(",":first-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute75713570() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("[","<0");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute91279089() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("theac","(");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveEnforcedAttribute37409256() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeEnforcedAttribute("noembec","charset");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks55038609() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks86078239() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks80574968() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks9547436() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistpreserveRelativeLinks5659154() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.preserveRelativeLinks(true);
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols54116589() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("deflatd","]]>","link");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols61296877() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("radip","colgroup",":matchTexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols13089273() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols(":contains(",":lt(","ruby");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols84711540() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("#roos","*>","http-equiu");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistaddProtocols85723461() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.addProtocols("head","optgrouo",":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols22067862() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("xmo",":only-of-type","disablec");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols9764927() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("captiom",":containsOwn(","optgroup");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols10265646() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("dd","forl","deflatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols67377427() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols("-.",":nth-child'","textareb");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testWhitelistremoveProtocols51513149() {
        Whitelist whitelist = (Whitelist) TestGenerator.getObjectFromPool("Whitelist");
        if (whitelist == null) {
            return;
        }
        Whitelist result = whitelist.removeProtocols(":only-of-typd","DOCTYPD","^=");
        TestGenerator.putObjectToPool(result);
        assertTrue(whitelist.equals(whitelist));
        try {
            whitelist.equals(whitelist);
        } catch (Exception e) {
            fail("whitelist.equals(whitelist) throws an exception");
        }
        try {
            whitelist.hashCode();
        } catch (Exception e) {
            fail("whitelist.hashCode() throws an exception");
        }
        try {
            whitelist.toString();
        } catch (Exception e) {
            fail("whitelist.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain28832004() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("iframf");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain82388552() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("imagf");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain78357526() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("-.");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain39421283() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main(":matchText");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextmain83178078() throws Exception {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        htmltoplaintext.main("colgroup");
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText91593542() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText80203050() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText72028679() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText14204211() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testHtmlToPlainTextgetPlainText39695861() {
        HtmlToPlainText htmltoplaintext = (HtmlToPlainText) TestGenerator.getObjectFromPool("HtmlToPlainText");
        if (htmltoplaintext == null) {
            return;
        }
        String result = htmltoplaintext.getPlainText((Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(htmltoplaintext.equals(htmltoplaintext));
        try {
            htmltoplaintext.equals(htmltoplaintext);
        } catch (Exception e) {
            fail("htmltoplaintext.equals(htmltoplaintext) throws an exception");
        }
        try {
            htmltoplaintext.hashCode();
        } catch (Exception e) {
            fail("htmltoplaintext.hashCode() throws an exception");
        }
        try {
            htmltoplaintext.toString();
        } catch (Exception e) {
            fail("htmltoplaintext.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain22770034() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!="});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain75775725() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain84056709() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain84295351() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh"});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testWikipediamain38218849() throws Exception {
        Wikipedia wikipedia = (Wikipedia) TestGenerator.getObjectFromPool("Wikipedia");
        if (wikipedia == null) {
            return;
        }
        wikipedia.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child("});
        assertTrue(wikipedia.equals(wikipedia));
        try {
            wikipedia.equals(wikipedia);
        } catch (Exception e) {
            fail("wikipedia.equals(wikipedia) throws an exception");
        }
        try {
            wikipedia.hashCode();
        } catch (Exception e) {
            fail("wikipedia.hashCode() throws an exception");
        }
        try {
            wikipedia.toString();
        } catch (Exception e) {
            fail("wikipedia.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain8013664() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain11467644() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain58159441() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain58060018() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testListLinksmain2490886() throws Exception {
        ListLinks listlinks = (ListLinks) TestGenerator.getObjectFromPool("ListLinks");
        if (listlinks == null) {
            return;
        }
        listlinks.main(new String[]{":last-of-typd",":last-of-type",":last-of-typf",":first-of-typd",":first-of-type",":first-of-typf","xml","xmk","xmm","xmp","xmo","xmq","#","abs;","abs:","frameseu","frameset","frameses","(","abs9","*",".","inpuu","text/","input","text0","inpus","deflatd","text.","deflate","deflatf","metb","meta","met`",":containsData)",":only-chile",":only-child",":containsData'",";",":only-chilc",":containsData(","!<",":nth-child)","!=","!>","=",":nth-child'","?",":nth-child(","bq","br","bs","checkbox","checkbow",":matchesOwn)","disabled","iframf","disablee","iframe","[","iframd","disablec",":matchesOwn(","^","checkboy",":matchesOwn'","a","svf","svh","svg","plaintexu","plaintext","plaintexs","tc","p","td","tfoot","te","tfoou","tfoos","tg","th","ti",":gt)","sarcasn",":gt(","sarcasm",":gt'","sarcasl","|","tq","tr","ts","dc","dd","de","optgrouq","optgroup","optgrouo","tbodx","tbody","tbodz","ds","dt","du","http-equiu",":eq)","$<","http-equiv",":eq(","$=","http-equiw",":eq'","$>","]]=","]]?","]]>","imagd","image",":matches)",":matchText",":matchTexu","imagf",":matchTexs","noframes","noframer","htto","name","httq",":nth-of-type)","namd","http",":nth-of-type'",":nth-of-type(",":matches(",":matches'","noframet","namf","theac","titld","hidden","hiddeo","theae","hiddem","thead","h0","h1","h2",":contains'","h3",":contains(","title","keygeo","h4","titlf","h5","keygem","h6","keygen","button","buttoo","buttom",":contains)","colgrouo","colgroup","forl","form","forn","basf","basd","base","selecu","select","selecs","textareb","captioo","textarea","hq","caption","textare`","hr","captiom","hs","type","typf","typd","colgrouq","actioo","action","hree","actiom","httpr","href","https","hreg","httpt","\"\"","scripu","script","odd","scrips","odc","ode",":alm","matg","eveo","even","evem","stylf",":lt'","style","mati",":lt(","styld","math",":lt)",":all",":alk","template","charseu","isindew","templatf","charset",":last-chile","templatd","charses","\"","\'",":nth-last-of-type)",":nth-last-of-type(","isindex",":nth-last-of-type'","isindey",":containsOwn)","*<","*=","*>",":containsOwn'",":containsOwn(","tabld","table","tablf",":has'","gzio","gzip",":has(","gziq",":has)","<.","</","[a-zA-Z_:][-a-zA-Z0-9_:.]+","<0","[a-zA-Z_:][-a-zA-Z0-9_:.])","[a-zA-Z_:][-a-zA-Z0-9_:.]*",":root",":roou","lh","spam",":last-chilc","li",":roos",":last-child","lj","spao","cok","~<","span","~=","com","~>","col","bgsound","bgsoune","Set-Cookif","bgsounc","radip",":not(",":not'","body","bodz",":nth-last-child'","radin",":nth-last-child(","radio","bodx",":nth-last-child)","*{","*|","*}",":not)","checkee","checkec","checked",":first-chile","html","Set-Cookie",":first-child","htmk","Set-Cookid",":first-chilc","DOCTYPE","htmm","DOCTYPF","^<","DOCTYPD","-,","^=","UTF.","noembee","--","^>","UTF-","noembed","[CDATA[","-.","UTF,","#roou","#roos","#root","US-ASCIH","http:/","http:.","US-ASCIJ","noembec","US-ASCII","http:0","noscrips","noscript","noscripu","optioo","optiom","option","boundary","boundarz","img","boundarx","imf","imh","link","linl","linj","basefont","basefonu","head","heae","nobs"});
        assertTrue(listlinks.equals(listlinks));
        try {
            listlinks.equals(listlinks);
        } catch (Exception e) {
            fail("listlinks.equals(listlinks) throws an exception");
        }
        try {
            listlinks.hashCode();
        } catch (Exception e) {
            fail("listlinks.hashCode() throws an exception");
        }
        try {
            listlinks.toString();
        } catch (Exception e) {
            fail("listlinks.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType37584705() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType95781117() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType88902555() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType60305659() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetMimeType18820822() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getMimeType();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl10050635() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl4603325() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl45511134() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl87018133() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testUnsupportedMimeTypeExceptiongetUrl30788852() {
        UnsupportedMimeTypeException unsupportedmimetypeexception = (UnsupportedMimeTypeException) TestGenerator.getObjectFromPool("UnsupportedMimeTypeException");
        if (unsupportedmimetypeexception == null) {
            return;
        }
        String result = unsupportedmimetypeexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(unsupportedmimetypeexception.equals(unsupportedmimetypeexception));
        try {
            unsupportedmimetypeexception.equals(unsupportedmimetypeexception);
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.equals(unsupportedmimetypeexception) throws an exception");
        }
        try {
            unsupportedmimetypeexception.hashCode();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.hashCode() throws an exception");
        }
        try {
            unsupportedmimetypeexception.toString();
        } catch (Exception e) {
            fail("unsupportedmimetypeexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode88615288() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode66069632() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode49887689() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode45990062() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetStatusCode32804803() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        int result = httpstatusexception.getStatusCode();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl72295574() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl93475047() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl3279600() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl53308981() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testHttpStatusExceptiongetUrl38462435() {
        HttpStatusException httpstatusexception = (HttpStatusException) TestGenerator.getObjectFromPool("HttpStatusException");
        if (httpstatusexception == null) {
            return;
        }
        String result = httpstatusexception.getUrl();
        TestGenerator.putObjectToPool(result);
        assertTrue(httpstatusexception.equals(httpstatusexception));
        try {
            httpstatusexception.equals(httpstatusexception);
        } catch (Exception e) {
            fail("httpstatusexception.equals(httpstatusexception) throws an exception");
        }
        try {
            httpstatusexception.hashCode();
        } catch (Exception e) {
            fail("httpstatusexception.hashCode() throws an exception");
        }
        try {
            httpstatusexception.toString();
        } catch (Exception e) {
            fail("httpstatusexception.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse12275130() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse13265() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse64168941() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse13882726() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse16968768() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse70086501() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse69751725() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse28504899() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse92815615() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse29926133() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Node) TestGenerator.getObjectFromPool("Node"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse4459921() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse85947995() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse57560845() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse16715325() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversortraverse89332959() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter55882458() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter82063343() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter19876624() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter45341522() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter22749548() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        NodeFilter.FilterResult result = nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Node) TestGenerator.getObjectFromPool("Node"));
        TestGenerator.putObjectToPool(result);
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter28092313() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter50358650() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter17021549() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter76169994() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testNodeTraversorfilter69478038() {
        NodeTraversor nodetraversor = (NodeTraversor) TestGenerator.getObjectFromPool("NodeTraversor");
        if (nodetraversor == null) {
            return;
        }
        nodetraversor.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"),(Elements) TestGenerator.getObjectFromPool("Elements"));
        assertTrue(nodetraversor.equals(nodetraversor));
        try {
            nodetraversor.equals(nodetraversor);
        } catch (Exception e) {
            fail("nodetraversor.equals(nodetraversor) throws an exception");
        }
        try {
            nodetraversor.hashCode();
        } catch (Exception e) {
            fail("nodetraversor.hashCode() throws an exception");
        }
        try {
            nodetraversor.toString();
        } catch (Exception e) {
            fail("nodetraversor.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect37222279() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect90604292() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect56402676() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect4882068() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorcollect22332832() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Elements result = collector.collect((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst54931263() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst27973528() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst15193194() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst96287523() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testCollectorfindFirst59151106() {
        Collector collector = (Collector) TestGenerator.getObjectFromPool("Collector");
        if (collector == null) {
            return;
        }
        Element result = collector.findFirst((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(collector.equals(collector));
        try {
            collector.equals(collector);
        } catch (Exception e) {
            fail("collector.equals(collector) throws an exception");
        }
        try {
            collector.hashCode();
        } catch (Exception e) {
            fail("collector.hashCode() throws an exception");
        }
        try {
            collector.toString();
        } catch (Exception e) {
            fail("collector.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr17948758() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("linl");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr7179860() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("button");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr62082290() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("tg");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr41419929() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("h3");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr20424793() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.attr("isindex");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr63453081() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("base");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr51853368() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("titlf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr7982330() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("commane");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr28032459() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("basd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasAttr22964879() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasAttr("~<");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr72180032() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("boundary");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr68981420() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("forn");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr15015967() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("even");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr68128644() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachAttr83797619() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachAttr("button");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr15619628() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("htmm","DOCTYPE");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr35186439() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":matchText","-.");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr2614953() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr(":gt(","basefons");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr86114769() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("#root","http-equiw");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsattr70426744() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.attr("name","UTF,");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr58821518() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr(":nth-child)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr74623045() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr92835985() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("radio");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr78471216() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("radin");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveAttr80535724() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeAttr("*>");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass23532712() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("titld");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass93661361() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("met`");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass66821302() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("h2");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass94936498() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass("gziq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsaddClass24121626() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.addClass(":first-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass38606311() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("checked");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass39008313() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("charses");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass72281610() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass56459217() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("textarea");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremoveClass18581326() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.removeClass("#roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass12452720() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("col");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass34168106() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass(":last-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass63342446() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("httq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass61159716() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("[a-zA-Z_:][-a-zA-Z0-9_:.])");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstoggleClass67570682() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.toggleClass("imagf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass61760585() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("hiddem");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass58619194() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass13105176() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("]]>");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass58753305() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("^");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasClass77720082() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasClass("spam");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval83615779() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval40120334() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval31080860() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval91449093() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval46796093() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.val();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval86277388() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("templatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval32160937() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":lt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval39673162() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val("keygeo");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval35911531() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":eq'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsval22589120() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.val(":roos");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext72179184() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext68956128() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext19605461() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext53652682() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstext99271605() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.text();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText30875647() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText92337831() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText10040377() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText31498567() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshasText83145051() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.hasText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText72055214() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText31435744() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText30252833() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText1679878() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseachText43261790() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<String> result = elements.eachText();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml21973023() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml86775121() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml19954082() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml53626674() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml80094179() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.html();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml11163672() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml11939768() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml26359159() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml30287836() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsouterHtml10940428() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        String result = elements.outerHtml();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName86577675() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":alm");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName48445267() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName(":first-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName54254125() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("frameseu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName26713406() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("odc");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstagName6086543() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.tagName("title");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml52635235() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("abs;");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml90829274() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("xmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml92150338() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("bodx");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml39661839() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("US-ASCII");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementshtml6358318() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.html("text0");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend827713() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":first-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend51408306() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("body");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend59855349() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend("colgrouo");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend69679383() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(":nth-last-of-type)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprepend75928361() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prepend(";");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend65104930() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("htmm");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend54148339() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("text0");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend64618676() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("--");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend77138634() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append(":root");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsappend40179007() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.append("keygen");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore51889156() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore18316420() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("textare`");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore57409997() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before(":matchTexs");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore67815886() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("bgsound");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsbefore97448397() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.before("h3");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter3673884() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("^");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter8511321() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("hreg");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter35467390() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("*");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter70931013() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after("xmk");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsafter75262163() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.after(":root");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap41672183() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("frameses");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap10897819() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("col");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap72591452() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("table");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap87672615() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap(":not(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementswrap57470956() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.wrap("math");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap83859240() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap69735660() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap59286917() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap94148444() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsunwrap87432303() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.unwrap();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty33778453() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty38199277() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty34555934() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty20231164() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsempty84305278() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.empty();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove38727461() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove6938223() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove62556218() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove77862063() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsremove12612136() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.remove();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect57624978() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":empty");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect95160254() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("img");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect30087232() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select(":nth-child'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect46302279() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("scrips");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsselect32433388() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.select("Set-Cookid");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot17808972() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("#root");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot56839089() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("styld");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot90303282() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("ode");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot92105065() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("lj");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnot52109664() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.not("http-equiu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq22706265() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(224);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq69888078() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(239);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq21023045() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(57343);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq72149462() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementseq31997740() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.eq(192);
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis77798457() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("tr");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis74190926() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("bq");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis89764105() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is(":last-of-type");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis64885770() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("</");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsis73769728() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        boolean result = elements.is("rubx");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext85413710() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext13936559() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext96896506() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext27313477() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext45533517() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext70744832() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("checkee");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext7033978() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext7642998() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("lj");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext68347254() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("=");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnext34045846() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.next("imagd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll34609008() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll88075812() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll182430() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll26638751() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll58884161() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll56469005() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("form");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll77264404() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("stylf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll2899990() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll(":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll44281585() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll("noframes");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsnextAll35369172() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.nextAll(":nth-last-of-type(");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev18697098() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev13539762() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev66016519() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev12879975() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev11434560() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev52602287() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("#texu");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev3028446() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("dt");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev34762522() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev(":only-chilc");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev93244986() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev("templatd");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprev97134711() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prev(":gt'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll69072105() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll97287696() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll70543910() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll20391363() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll63884589() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll86698802() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":matches)");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll33724774() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":containsOwn'");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll79034485() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("cok");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll91397019() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll("-,");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsprevAll63336675() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.prevAll(":only-of-typf");
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents40363351() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents2919686() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents15710038() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents24165972() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsparents32316662() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.parents();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst887082() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst10998582() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst12243891() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst56069950() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfirst86987609() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.first();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast6061865() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast29889709() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast4378329() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast34244743() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementslast62292234() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Element result = elements.last();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse61456056() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse18877174() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse49474385() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse61410265() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementstraverse63652561() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.traverse((NodeVisitor) TestGenerator.getObjectFromPool("NodeVisitor"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter54169861() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter32360662() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter88111267() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter22610486() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsfilter10405300() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        Elements result = elements.filter((NodeFilter) TestGenerator.getObjectFromPool("NodeFilter"));
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms26214710() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms99098218() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms18205050() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms8410649() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testElementsforms99781783() {
        Elements elements = (Elements) TestGenerator.getObjectFromPool("Elements");
        if (elements == null) {
            return;
        }
        List<FormElement> result = elements.forms();
        TestGenerator.putObjectToPool(result);
        assertTrue(elements.equals(elements));
        try {
            elements.equals(elements);
        } catch (Exception e) {
            fail("elements.equals(elements) throws an exception");
        }
        try {
            elements.hashCode();
        } catch (Exception e) {
            fail("elements.hashCode() throws an exception");
        }
        try {
            elements.toString();
        } catch (Exception e) {
            fail("elements.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse2435069() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("plaintexu");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse22854397() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("imf");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse87186974() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse("noframer");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse8644962() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":last-chile");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testQueryParserparse97182221() {
        QueryParser queryparser = (QueryParser) TestGenerator.getObjectFromPool("QueryParser");
        if (queryparser == null) {
            return;
        }
        Evaluator result = queryparser.parse(":emptz");
        TestGenerator.putObjectToPool(result);
        assertTrue(queryparser.equals(queryparser));
        try {
            queryparser.equals(queryparser);
        } catch (Exception e) {
            fail("queryparser.equals(queryparser) throws an exception");
        }
        try {
            queryparser.hashCode();
        } catch (Exception e) {
            fail("queryparser.hashCode() throws an exception");
        }
        try {
            queryparser.toString();
        } catch (Exception e) {
            fail("queryparser.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect81981569() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("hree",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect28214749() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("#text",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect62770366() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("\'",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect74772443() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("disablec",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect79028452() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":only-of-typd",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect9883083() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect66798323() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect89362204() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect33610638() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect63878371() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select((Evaluator) TestGenerator.getObjectFromPool("Evaluator"),(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect43221015() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("(",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect8142218() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("checkec",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect96803392() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(":roos",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect33852423() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select("theac",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselect71590657() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Elements result = selector.select(".",(Iterable<Element>) TestGenerator.getObjectFromPool("Iterable<Element>"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst59153784() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("plaintext",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst64020758() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst(":alm",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst83207429() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("title",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst7175980() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("sarcasn",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
    @Test
    public void testSelectorselectFirst8086398() {
        Selector selector = (Selector) TestGenerator.getObjectFromPool("Selector");
        if (selector == null) {
            return;
        }
        Element result = selector.selectFirst("imh",(Element) TestGenerator.getObjectFromPool("Element"));
        TestGenerator.putObjectToPool(result);
        assertTrue(selector.equals(selector));
        try {
            selector.equals(selector);
        } catch (Exception e) {
            fail("selector.equals(selector) throws an exception");
        }
        try {
            selector.hashCode();
        } catch (Exception e) {
            fail("selector.hashCode() throws an exception");
        }
        try {
            selector.toString();
        } catch (Exception e) {
            fail("selector.toString() throws an exception");
        }
    }
}